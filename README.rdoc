= PageCacheFu

PageCacheFu adds the following missing features:

* Expiry time for cached pages (using <code>:expires_in</code> option)
* Different caches for different hostnames (e.g. subdomains)
* Different caches for query strings

== Installation

* Just install the plugin, add something like <code>:expires_in => 30.minutes</code> to your <code>caches_page</code> calls.
* Set up a cronjob to periodically run the <code>page_cache_sweeper</code> script using something like this in your <code>crontab</code>:

    * * * * * www-data /usr/bin/ruby /path/to/my/rails_app/script/page_cache_sweeper

* Tell your Apache to use the new cache location using something like this in your <code>Virtualhost</code> config:

    RewriteMap uri_escape int:escape
    <Directory /path/to/my/rails_app/public/>
      RewriteEngine On
      RewriteCond %{REQUEST_METHOD} GET [NC]
      RewriteCond %{DOCUMENT_ROOT}/cache/%{HTTP_HOST}%{REQUEST_URI}%{QUERY_STRING}.html -f
      RewriteRule ^([^.]+)$ cache/%{HTTP_HOST}/$1${uri_escape:%{QUERY_STRING}}.html [L]		

      RewriteCond %{REQUEST_METHOD} GET [NC]
      RewriteCond %{DOCUMENT_ROOT}/cache/%{HTTP_HOST}/index.html -f
      RewriteRule ^$ cache/%{HTTP_HOST}/index.html
    </Directory>

If someone could supply a nginx sample config, it'd be greatly appreciated...

== Options for +caches_page+

You can use the following options with <code>caches_page</code> in your controllers:

=== <code>:expires_in</code>

Use this to specify a time interval after which the cache should expire. Example:

    caches_page :show, :expires_in => 30.minutes

=== <code>:include_query_string</code>

By default, page_cache_fu stores the query string as part of the cached filename to enable caching for stuff like pagination and search results. You can disable this by setting this to <code>false</code>, like so:

    caches_page :show, :include_query_string => false

=== <code>:page_cache_directory</code>

By default, page_cache_fu stores cached files in <code>#{RAILS_ROOT}/public/cache/#{hostname}</code>. If you want to override this, you can use this option. Examples:

    caches_page :show, :page_cache_directory => '/'                     # yields #{RAILS_ROOT}/public/cache (without hostname)
    caches_page :show, :page_cache_directory => '/../'                  # yields #{RAILS_ROOT}/public
    caches_page :show, :page_cache_directory => '/../my_other_folder'   # yields #{RAILS_ROOT}/public/my_other_folder

== Sweeper options

The sweeper is usually called via the <code>page_cache_fu:sweep_expired_page_caches</code> Rake task. However, you can call <code>PageCacheFu::CacheSweeper#sweep_if_expired</code> on your own, if you like. It takes the cache directory as a first parameter and a hash of options as the second. These options are:

=== <code>:recursive</code>

Set this to <code>true</code> to descend into subdirectories. (Default in the Rake task)

=== <code>:match_mode</code>

Required Unix file permissions. Specify this to tell the sweeper to skip files and directories which don't satisfy your required permissions. For example, <code>:match_mode => 220</code> will skip files which aren't writable by both the file owner and group. 

== Version

0.1

== Credits

The initial code for hostname based caching has been taken from Nate Bibler (initial post) and Andy Triggs (in the comments), http://launchpad.rocketjumpindustries.com/posts/5-defining-a-dynamic-page-cache-loction-by-subdomain-in-rails

Copyright (c) 2009 Jan Schulz-Hofen, ROCKET RENTALS GmbH, released under the MIT license
